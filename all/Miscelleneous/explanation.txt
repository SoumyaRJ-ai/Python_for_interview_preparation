Algorithm
-----------
- sequenec of instructions that one must perform in order 
  to solve a well-formulated problem 
- Alogirthm will be a method of translating the inputs 
  into the outputs 
- well-formulated problem is unabiguous and precise.

Computational Complexity
------------------------
It is a field from computer science which analyzes algorithms based on the amount resources required for running it.
The amount of required resources varies based on the input size, so the complexity is generally expressed as 
function of n, where n is the size of the input. 

    A. Time Complexity  : Amount of time, it takes, to run the algorithm. 
            It is estimated by counting the number of elementary operations performed by the algorithm, supposing that 
            each elementary operation takes a fixed amount of time to perform.
        (i) Best Case    : complexity of sovling the problem for the best input
        (i) Average Case : Average complexity of solving the problem
        (i) Worst Case   : complexity of solving the problem for the worst input of size n 


    B. Space Complexity : Amount of memory space required to solve a problem in relation to the input size 

Big-O Notation
--------------
Computer scientists use Big-O notatio to describe concisely
the running time of an algorithm. 

    ------------------------------------------
    Name                    Time Complexity
    ------------------------------------------
    Constant Time           O(1)
    Logarithmic Time        O(log n)
    Linear Time             O(n)
    Quasi-Linear Time       O(nlog n)
    Quadratic Time          O(n^2)
    Exponential Time        O(2^n)
    Factorial Time          O(n!)
    ------------------------------------------

    1. Constant Time - O(1)
                    When algorithm does not depend on the input data (n)

            Ex 1: 
                if a > b: 
                    return True 
                else: 
                    return False 

            Ex 2: 
                def get_first(data):
                    return data[0]   # Independant of data size, it will return first element, everytime
                if __name__ == '__main__':
                    data = [1, 2, 9, 8, 3, 4, 7, 6, 5]
                    print(get_first(data)) 
    2. Logarithmic Time - O(n log n)
                    When algorithm reduces the size of the input data in each step (means, not needed to look at all values of input data)
            Ex 1: 
                for index in range(0, len(data), 3):
                    print(data[index])
            Ex 2:
                def binary_search(data, value):
                    n = len(data)
                    left = 0
                    right = n - 1

                    while left <= right:
                        middle = (left + right) / 2
                        if value < data[middle]:
                            right = middle - 1
                        elif value > data[middle]:
                            left = middle + 1
                        else:
                            return middle
                raise ValueError('Value is not in the list')
                if __name__ == '__main__':
                    data = [1, 2, 3, 4, 5, 6, 7, 8, 9]
                    print(binary_search(data, 8))

    3. Linear Time - O(n)
                    When running time increases at most linearly with the size of the input data. 
            Ex 1: 
                for value in data:
                    print(value)
            Ex 2: 
                def linear_search(data, value):
                    for index in range(len(data)):
                        if value == data[index]:
                            return index
                    raise ValueError('Value not found in the list')
                if __name__ == '__main__':
                    data = [1, 2, 9, 8, 3, 4, 7, 6, 5]
                    print(linear_search(data, 7))

    4. Quasi-Linear Time - O(n log n)
                    When each operation in the input data have  a Logarithmic time complexity
                    eg:     mergesort, timsort, heapsort 

Algorithm Design Techniques 
---------------------------
1. Exhaustive Search Algorithms (or bruteforce)
2. Branch-and-Bound Algorithms
3. Greedy Algorithms 
4. Dynamic Programming Algorithms 
5. Recursive Algorithms
6. Divide-and-Conquer Algorithms
7. Randomized Algorithms



Design Patterns 
===============
1. Structural 
    A closure is a way of keeping alive a variable even when the function has returned. So, in a closure, a function is defined along with the environment. In Python, this is done by nesting a function inside the encapsulating function and then returning the underlying function.
        1.Adapter

        2.Bridge

        3.Composite

        4.Decorator

        5.Facade

        6.Flyweight

        7.Proxy

2. Creational 
3. Behavioral
