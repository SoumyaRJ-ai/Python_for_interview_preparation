CI/CD
	- it  means Continuous Integration/Continuous Deployment
	- I worked with Jenkins
	- created a EC2 instance, installed Jenkins, added plugins like Filesystem Trigger,
      code Build plugin, http request plugin, ...
	- I used bitbucket as the code repository.
	- Gone to settings, and brought the webhook and integrated in the Jenkins.
	- Now any git push to the bitbucket event will trigger the build process.
	- And, in the code repository, I wrote the code in Groovy script.
	- It involved 5 stages:
		1. unit testing
		2. Integration testing
		3. code coverage check -- whether it is greater than 90% or not
		4. Static code analysis with flake8 and SonarQube
		5. security scanning using Veracode
		As there is no build step in python, next step is deployment

	Current project, it is with containers
		We use docker.yaml for containzation
		And kubernetes.yaml for orchestration

	- Also, worked with cloudformation.json templates for infra management .
		 - Terraform is a very naive experience

	- Code Flow process
		- feature branch -(Pull requests)(once completed) - dev branch -(testers signoff)-> release branch -(signoff from client)- production branch

- https://www.xenonstack.com/blog/continuous-integration-and-delivery

Development Process
-------------------
System design
Data flow design
DataBase design
Creating jira, by speaking with stakeholders
Implement, commit code, build and test
Release code at end of sprint
Demoing the new features to clients/Stackholders


Code Flow
----------
- First, we will reach out to the clients/stackholders and gather the requirement.
- Then, we create JIRAs correspondingly, in the backend.
- During the Sprint planning, we discuss with all the stackholders to prioritise
  the JIRAs for the sprint.
- Then, for each of the JIRAs given, we will create a branch
  Under the feature branch, we will start developing
  We will follow TDD - Test driven development
	Unittest mocks or pytest fixtures for mocking the 3rd party resources or REST APIs
	Use mypy for testing the annotations and types
	For linting, i used pylint and autopep8 for reformatting code for PEP8 guidienesles

	We need to ensure all existing and new test cases are running
	Then, push the code
	Then, CI/CD proces will run
	If all correct, then we can give pull request

- Then, two  approvals needed; team will review the code; if any changes i will
  Address them;
  Else they will approve; i will merge the code
  Then, code goes to next branch

- We are with python; we add release tag and push the code
  Python don't have build, so next step is deployment.

Agile Methodology
-----------------
- We will follow all Agile ceremonies
- We will sit with the clients for requirement gathering
  Then, place the jiras in the backlog
- During the sprint planning, we will discuss on want among them to take,
  check for any dependencies and get all needed things.
- At the end of the sprint, we will have sprint review
  and retrospective meetings
- We give utmost importance to these review feedbacks,
  and try to improve this continuous process


Sprint Burndown Chart
---------------------
	- is a graphic representation that shows the rate at which work is completed and
	  how much work remains to be done.
	- it shows Team progress towards the Sprint Goal, not in terms of time spent but
	  in terms of how much work remains.


Development Tools
==================
	for code Management - Bitbucket, Github
	for Issue Tracking  - Jira, CA Rally
	for CI/CD           - Jenkins
	for monitoring      - Dynatrace
	for log management  - Splunk and Sumo-logic

	for local development - Intellij, Visual Studio Code


	Infrastructure Monitoring 	- AWS X-ray + AWS Cloudwatch
	application Monitoring 		- worked with tools like Dynatrace, appDynamics and Datadog


how to resolve conflicts
------------------------
When there are conflicts,
	If they are working at different lines, in the same file,
	Bitbucket can intelligently merge them

	Say, if both are working in same lines, then conflict comes
	In that case, in the second pushed person need to resolve the conflict

	best practice is
		"Pull the code, before pushing the code"

	We need to push from the default branch, say develop.
	So, these conflict and confusions can be reduced to very minimum


Scrum Emergency Procedure: (do only as much as necessary)
--------------------------
	- Change the way the team does the work. Do something different.
	- Get help, usually by offloading backlog to someone else.
	- Reduce scope.
	- Abort the Sprint and replan.
	- Inform management how the emergency affects release dates.


SDLC
======
	Requirement gathering
	Sprint planning
	In sprint, witing code and test case, we do TDD – test driven develop,emt
	Build procss – CI/CD - Jenkins
	Pull request. Two approvals
	cod e merges to dev
	End of sprint, all new code to push to release branch
	===and demo


what are you looking in th new work?
-----------------------------------
- Good Work and workcultre
- IN terms of work,
	- Write coding
	- Design solutions
	- Add tests to make the code reliable
- In long term, i want to be architect. I am making every step towards that journey

- In terms of work, it is almost match of what am doing now and your expectations
- I am to prove myself initially, and learn to add value to the project
- I want to be helpful, to more people, with my work
