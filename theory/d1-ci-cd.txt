CI/CD
	- it  means Continuous Integration/Continuous Deployment
	- I worked with Jenkins
	- created a EC2 instance, installed Jenkins, added plugins like Filesystem Trigger,
	  code Build plugin, http request plugin, ...
	- I used bitbucket as the code repository.
	- Gone to settings, and brought the webhook and integrated it into Jenkins.
	- Now any git push to the bitbucket event will trigger the build process.
	- And, in the code repository, I wrote the code in Groovy script.
	- It involved 5 stages:
		1. unit testing
		2. Integration testing
		3. code coverage check -- whether it is greater than 90% or not
		4. Static code analysis with flake8 and SonarQube
		5. security scanning using Veracode

	Packaging
		I create a setup.py file, where  will add all the dist utils things for creating a wheel file
		One this wheel file is created, next step is deployment

	Current project, it is with containers
		We use docker.yaml for containzation
		And kubernetes.yaml for orchestration

	- Also, worked with cloudformation.json templates for infra management.
		 - Terraform is a very naive experience

	- Code Flow process
		- feature branch -(Pull requests)(once completed) - dev branch -(testers signoff)-> release branch -(signoff from client)- production branch

- https://www.xenonstack.com/blog/continuous-integration-and-delivery

- scripted vs declarative pipelines
	- A Jenkinsfile can be written using two types of syntax
		1) Declarative and
		2) Scripted.
	- Declarative pipelines break down stages into individual stages that can contain multiple steps.
	- Scripted pipelines use Groovy code and references to the Jenkins pipeline DSL within the stage elements without the need for steps.

	- Declarative pipelines use the same execution engine as scripted pipelines, but they add a number of new benefits.
	  They are
		- easier to learn,
		- have richer syntax,
		- provide syntax checking, and
		- are easily restartable using the “Restart from stage” functionality

	- Declarative Pipelines follow "pipeline-as-code" principle.
		- It will contain blocks like
			pipeline – contains the whole pipeline
				agent – defines the machine that will handle this pipeline
				stages – declares the stages of the pipeline
					steps – small operations inside a particular stage

	- Declarative Example:
			pipeline {
				agent any
				stages {
					stage('Hello World') {
						steps {
							sh 'echo Hello World'
						}
					}
				}
			}
	- Scripted Example:
			node {
				stage('Hello world') {
					sh 'echo Hello World'
				}
			}

- Declarative pipelines Features
	1) Declarative syntax: pipelines are defined using a simple and structured syntax that is easy to read and understand.
	2) Easy pipeline visualization: pipelines are automatically visualized in the Jenkins UI, making it easy to understand the pipeline flow and status.
	3) Stage-based execution: pipelines are defined in stages, with each stage containing one or more steps. This makes it easy to define and manage complex pipelines.
	4) Integration with Jenkins plugins: declarative pipelines can easily integrate with Jenkins plugins, making it easy to extend the functionality of the pipeline.
	5) Reusable pipeline code: pipelines can be defined as reusable templates, making it easy to define and maintain a consistent pipeline structure across multiple projects.

- Jenkins Multibranch Pipeline
	- A multibranch job is simply a folder of pipeline jobs.
	- For every branch in repo, Jenkins will create a folder.
	- So instead of creating a pipeline job for each of the branches we have in a git repository, we can use a multibranch job.

- blue/green deployment vs canary release
	- A blue/green deployment is a deployment strategy in which you create two separate, but identical environments.
		- One environment (blue) is running the current application version and one environment (green) is running the new application version

	- A canary release is an early build of an application. Splitting stable and development branches is a widespread strategy in the open-source world.
		- Many projects use an odd/even numbering scheme to separate stable from the non-stable version.

SDLC
----
- It means Software Development Life Cycle
- SDLC defines the phases in building of software or application.
	o Project Planning
	o Requirement Gathering (Gathering information used to plan project, Identifying risks)
	o Design (How the application will be built)
	o Coding (developing) (Based on requirements, developers will write the application)
	o Testing
	o Production (deployment)(Releasing product)
	o Maintenance (Making sure product is stable, looking at customer report on bugs and fixing it)


Development Process
-------------------
System design
Data flow design
DataBase design
Creating jira, by speaking with stakeholders
Implement, commit code, build and test
Release code at end of sprint
Demoing the new features to clients/Stakeholders


Code Flow
----------
- First, we will reach out to the clients/Stakeholders and gather the requirements.
- Then, we create JIRAs correspondingly, in the backend.
- During the Sprint planning, we discuss with all the Stakeholders to prioritise the JIRAs for the sprint.
- Then, for each of the JIRAs given, we will create a branch
  Under the feature branch, we will start developing
  We will follow TDD - Test driven development
	Unittest mocks or pytest fixtures for mocking the 3rd party resources or REST APIs
	Use mypy for testing the annotations and types
	For linting, i used pylint and autopep8 for reformatting code for PEP8 guidelines.

	We need to ensure all existing and new test cases are running
	Then, push the code
	Then, CI/CD process will run
	If all correct, then we can give pull request

- Then, two  approvals needed; team will review the code; if any changes I will
  Address them;
  Else they will approve; I will merge the code
  Then, code goes to next branch

- We are with python; we add release tag and push the code
  Python doesn't have build, so next step is deployment.


Agile Methodology
-----------------
- We will follow all Agile ceremonies
- We will sit with the clients for requirement gathering
  Then, place the jiras in the backlog
- During the sprint planning, we will discuss on want among them to take, check for any dependencies and get all needed things.
- At the end of the sprint, we will have sprint review and retrospective meetings
- We give utmost importance to these review feedbacks, and try to improve this continuous process

Agile
------
- Agile is an iterative approach to project management and software development that helps teams deliver value to their customers faster and with fewer headaches.
- The three C's of Agile are  Card, Conversation and Confirmation.
- Means first create stories, discuss on them, and deliver them.


Agile Methodology Disadvantages
-------------------------------
- Fragmented output
	Incremental delivery may help bring products to market faster, but it’s also a big disadvantage of Agile methodology.
	That’s because when teams work on each component in different cycles, the complete output often becomes very fragmented rather than one cohesive unit.

- Poor resource planning
	Because Agile is based on the idea that teams won’t know what their end result (or even a few cycles of delivery down the line) will look like from day one, it’s challenging to predict efforts like cost, time and resources required at the beginning of a project (and this challenge becomes more pronounced as projects get bigger and more complex).

- Limited documentation
	In Agile, documentation happens throughout a project, and often “just in time” for building the output, not at the beginning.
	As a result, it becomes less detailed and often falls to the back burner.

- No finite end
	The fact that Agile requires minimal planning at the beginning makes it easy to get sidetracked delivering new, unexpected functionality.
	Additionally, it means that projects have no finite end, as there is never a clear vision of what the “final product” looks like.

- Difficult measurement
	Since Agile delivers in increments, tracking progress requires you to look across cycles.
	And the “see-as-you-go” nature means you can’t set many KPIs at the start of the project.
	That long game makes measuring progress difficult.


Agile vs scrum
--------------
- Agile is a philosophy, whereas scrum is a type of agile methodology.

Agile vs kanban
---------------
Feature			|Agile											| Kanban
-------------------------------------------------------------------------------
Focus			|Flexibility and change
				| Flow and efficiency

Work breakdown	|Projects are broken down into short sprints
				| Work is not broken down into sprints

Communication	|The team communicates frequently and openly
				|The team communicates as needed

Planning		|The team meets regularly to assess progress and make changes to the plan
				| The team uses a visual board to track work as it moves through the process

Documentation	|The team documents the project's requirements and progress
				| The team does not document the project's requirements or progress

Testing		|The team tests the project's features at the end of each sprint
			| The team tests the project's features continuously

Deployment		| The project is deployed at the end of each sprint
				| The project is deployed continuously


Sprint Metrics Planning
----------------
	- For story points, We go with "ok planning" model, where we will
		1) first discuss about the issues to work, followed by that,
		2) everyone in the team will give individual Fibonacci estimate,
		3) Finally, we will mark the average number as story points


Sprint Burndown Chart
---------------------
- Is a graphic representation that shows the rate at which work is completed and how much work remains to be done.
- It shows Team progress towards the Sprint Goal, not in terms of time spent but in terms of how much work remains.


Relative estimation
-------------------
- It provides better estimates.
- It works by estimating size first so you can relate this size to a task you have completed previously.
- Then you estimate how long the task will take to complete by making a relative comparison to the time taken to complete this other task.


spiral vs agile
---------------
- spiral deals with risk handling, like various kinds of unanticipated risks but customer interaction is less.
  spiral is needed in projects that are prone to various kind of risks that are difficult to anticipate
  at the beginning of the project.
  Also, proper documentation is required for spiral model.
- Whereas agile is opposide to it, with
	half-baked or no documentation
	more customer interaction
	incrimental developement


Development Tools
------------------
	for code Management - Bitbucket, Github
	for Issue Tracking  - Jira, CA Rally
	for CI/CD           - Jenkins
	for log management  - Splunk and Sumo-logic

	for local development - Intellij, Visual Studio Code


	Infrastructure Monitoring 	- AWS X-ray + AWS Cloudwatch
	application Monitoring 		- worked with tools like Dynatrace, appDynamics and Datadog

	for data visualization - python based matplotlib/seaborn, PowerBI
	for db design


how to resolve conflicts
------------------------
When there are conflicts,
	If they are working at different lines, in the same file,
	Bitbucket can intelligently merge them

	Say, if both are working in same lines, then conflict comes
	In that case, in the second pushed person need to resolve the conflict

	best practice is
		"Pull the code, before pushing the code"

	We need to push from the default branch, say develop.
	So, these conflict and confusions can be reduced to very minimum


Scrum Emergency Procedure: (do only as much as necessary)
--------------------------
	- Change the way the team does the work. Do something different.
	- Get help, usually by offloading backlog to someone else.
	- Reduce scope.
	- Abort the Sprint and replan.
	- Inform management how the emergency affects release dates.

three amigos session
--------------------
	- Meeting between product owner, developer, and quality tester
	- To get clarity on scope of the project
	- It should be done before the sprint planning, for the next sprint.


code review/feedbacks
---------------------
- Earlier, I used to leave code review comments for the lintings.
- But now as latest projects were set with pre-commit hooks, by the time, code is committed, PEP8 guidelines were followed.
- Now, I will check for any logic suggestions like
	- If someone wrote a logic in O(n^2), and it can be better done, in say O(N),
	- Or, If there is ambiguity in the code comments and/or variable namings, i would suggest.
- Also, I follow the CEDAR feedback model, which has 5 steps:
	1. Context:
		The first thing to do is Put things in Context.
		Who is being “affected”, How things are going, What was happening, etc.

	2. Examples:
		Then, describe Examples of what should be Improved.
		Situations in which a Behavior or an Action were reprehensible.

	3. Diagnosis:
		Clearly Explain what the Problem was and Why.
		Don’t assume that it is obvious: Highlight the Issue repeatedly.

	4. Actions:
		Define Actions or Routines to improve Behavior or Performance.
		An Easy guideline that everyone could follow.

	5. Review:
		Organize regular meetings to Track Progress.
		Once a week first, then once a month an then Quarterly, for example.


SDLC
------
	Requirement gathering
	Sprint planning
	In sprint, witing code and test case, we do TDD – test driven develop,emt
	Build procss – CI/CD - Jenkins
	Pull request. Two approvals
	cod e merges to dev
	End of sprint, all new code to push to release branch
	---and demo

DDD
	- Domain Driven Development
	- software development philosophy centered around the domain, or sphere of
	  knowledge, of those that use it.
	- DDD is an effective way to write clear, testable code, and provides principles
	  and patterns to solve difficult problems.
	- DDD gets everybody using the same language.

blue-green deployment
	- A deployment strategy in which you create two separate, but identical environments.
	- One environment (blue) is running the current application version and one environment
      (green) is running the new application version.

- stack trace
	- It is a report that provides information about program subroutines.
	- It is commonly used for certain kinds of debugging, where a stack trace can help software engineers figure out where a problem lies or how various subroutines work together during execution.


How to debug code defect  give troubleshooting process, tell for python coding
=====================
	1) Use print statements: Use print statements in your code to print out variables or objects at various stages of your program to identify where the issue may be occurring.

	2) Use a debugger: Python has a built-in debugger called pdb that allows you to step through your code line by line and see the values of variables at each step. You can start the debugger by adding import pdb; pdb.set_trace() to the line where you want to start debugging.

	3) Check variable values: Check the values of variables in your code to see if they're what you expect them to be. You can use print statements or the debugger to do this.

	4) Review error messages: Read the error messages that Python provides when your program crashes or throws an exception. They can often provide useful information on where the issue may be occurring.

	5) Divide and conquer: If you're having trouble identifying the root cause of the issue, try to isolate the problem by commenting out or removing sections of your code until the problem disappears. This can help you narrow down where the issue is occurring.
	6) Use a linter: A linter is a tool that analyzes your code for potential errors and coding style issues. Use a Python linter like pylint or flake8 to help identify potential issues in your code.

	7) Check for typos: Check your code for typos, missing or extra characters, or other simple mistakes that could be causing the issue.

	8) Check the flow of control: Make sure that the flow of control in your program is correct. Check loops, conditionals, and function calls to make sure they're behaving as expected.

	9) Review documentation: Check the documentation for the libraries, modules, and functions you're using to make sure you're using them correctly. Pay attention to function arguments, return values, and any special behaviors.

	10) Ask for help: If you're still having trouble identifying the issue, reach out to other developers or online forums for help. Sometimes a fresh pair of eyes can help spot



Jenkins Q&APIs
===============
Jenkins
========
Q1) Tom wants to store the username and password for his database application in the jenkins pipeline. which option should he choose in this scenarios
	a) system variables
	b) credentials plugin
	c) credentials should be managed inside the script
	d) ssh plugin

Ans) b) credentials plugin

Q2) Jenkins tool has a "user content" mechanism, where jenkins administrators can place files inside that directory. Identify the directory name
Ans) $JENKINS_HOME/userContent

Q3) you have used the artifactory Jenkins plugin in a building job. After the execution of the build job, an artifact is created in the file form. which artifact file will be formed: tar file, jar fil, zip file or txt file
Ans) zip file

Q4) command to create a new image from a dockerfile while a pipeline is running
Ans)
		pipeline {
		  agent any

		  stages {
			stage('Build') {
			  steps {
				script {
				  def dockerfile = 'path/to/Dockerfile'
				  def imageTag = 'myimage:latest'

				  // Build the Docker image from the Dockerfile
				  docker.build(imageTag, "-f ${dockerfile} .")
				}
			  }
			}
		  }
		}

Q5) what is the purpose of below code, In Jenkins CI/CD

	logRotator {
		 numToKeep 5
	}

	choose the correct option
	a) To keep the last five builds
	b) To run the program five times with intermediate values in each iteration
	c) To rotate the first five builds
	d) To update five builds

Ans) a) To keep the last five builds


Q6) The main configuration file consists of several directives that affect how nagios operates. Using the Nagios process and the CGIs, we can read the config file. From the given options, choose the sample main configuration file's path

	choose the correct option
	a) local/nagios/etc/resource.cfg
	b) /usr/local/resource.cfg
	c) /usr/local/nagios/etc
	d) /usr/local/nagios/etc/resource.cfg

Ans)  d) /usr/local/nagios/etc/resource.cfg

Q7) Mean time to failure recovery and deployment frequency are the two important DevOps KPIs. Which is the third one?

	choose the correct option
	a) percentage of failed deployments
	b) percentage deployments
	c) value of failed deployments
	d) fixed failed deployments

Ans) a) percentage of failed deployments

Q8) which option is used to add a submodule or another file to a playbook , allowing a code written once to be added to multiple playbooks?

	choose the correct option
	a) include
	b) import
	c) Export
	d) Delay

Ans) a) include

Q9) which option helps in manually linking and orchestrating several containes running on multiple hosts created using docker?

	choose the correct option
	a) docker
	b) docker master
	c) kubernests
	d) decryption plugin

Ans) c) Kubernetes
