Merge Sort
	Time complexity - O(n Log N)
	space Complexity - O(n)

DRY principle
	- DRY means Do not  Repeat Yourself
	- "Every piece of knowledge must have a single, unambiguous, authoritative
	  representation within a system"
	- Less code is good: It saves time and effort, is easy to maintain, and also
	  reduces the chances of bugs.
	- Ex: helper class in enterprise libraries, in which every piece of code is
	  unique in the libraries and helper classes

WET principle
	- WET means Write Everything Twice
	- It mean the opposite i.e. code that doesn't adhere to DRY principle.

KISS princple
	- keep it simple, stupid

sorting
	Time Complexities
		- Quick Sort -  O(n*logn)
		- Linked List - Search - O(n)

Memory
	- Stack vs Heap
		- Whenever an object is created, it's always stored in the Heap space,
		   and stack memory contains the reference to it.
		- Stack memory only contains local primitive variables and reference variables to objects in heap space.
		- Objects stored in the heap are globally accessible whereas stack memory can’t be accessed by other threads.
		- Memory management in stack is done in LIFO manner whereas it’s more complex in Heap memory because it’s used globally.
		- Stack memory is short-lived whereas heap memory lives from the start till the end of application execution.
		- Heap memory is used by all the parts of the application, stack memory is used only by one thread of execution.
		- When stack memory is full, Java runtime throws
				java.lang.StackOverFlowError When heap memory is full, it throws
				java.lang.OutOfMemoryError: Java Heap Space error.
		- Stack memory is faster than heap memory.

- SOLID
	- Single responsibility  - one method/function one job
	- Open-closed principle  - open for extension, but closed for modification
	- Liskov substitution	 - objects of a superclass shall be replaceable with objects of its subclass
	- Interface Segregation - client should not be forced to depend on methods its does not use
	- Dependency Inversion   - Depend on interface decouping
				- against composition
				- Not instantiating classes, which are not part of it

High Level Design(HLD) vs Low Level Design(LLD)
	- High Level Design refers to the overall system design.
	  Low Level Design is like detailing HLD means it refers to component-level design process.
	- First HLD is created, followed by LLD

	- HLD is also known as macro level/system design.
	  LLD is also known as micro level/detailed design.
	- HLD describes the overall description/architecture of the application.
	  LLD describes detailed description of each and every module.
	- HLD expresses the brief functionality of each module.
	  LLD expresses details functional logic of the module.
	- HLD is created by solution architect.
	  LLD is created by designers and developers.
	- In HLD the output criteria is data base design, functional design and review record.
	  In LLD the output criteria is program specification and unit test plan.
	- High Level Solution converts the Business/client requirement into High Level Solution.
	  Low Level Design converts the High Level Solution into Detailed solution.
	- In HLD the input criteria is Software Requirement Specification (SRS).
	  In LLD the input criteria is reviewed High Level Design (HLD).
	- In HLD the participants are design team, review team, and client team.
	  Where as in LLD, participants are design team, Operation Teams, and Implementers.

Interface vs Abstract class
	- Abstract class has state

- Data Structures
	- https://www.interviewbit.com/data-structure-interview-questions/
	- Used for efficient organization and modification of data
	- Types
		1) Linear Data structures:
			- If elemenets of a data structure result in a sequence or a linear list
			- Ex: Arrays, Linked List, Stacks, Queues, etc
		2) Non-Linear Data structures:
			- If elemenets of data structure results in a way that traversal of nodes is not
              done in a sequenctial manner
			- Ex: Trees, Graphs, Tables, sets, etc
	- Arrays
		- Arrays are the collection of similar types of data stored at contiguous memory locations.
		- It is the simplest data structure where the data element can be accessed randomly just
		  by using its index number.
	- Binary Trees
		- A binary Tree is a special type of tree where each node can have at most two children.
		- Binary tree is generally partitioned into three disjoint subsets,
		  i.e. the root of the tree, left sub-tree and right sub-tree.
	- AVL Trees
		- AVL trees are height balancing BST.
		- AVL tree checks the height of left and right sub-trees and assures that the difference
		  is not more than 1.
		- This difference is called Balance Factor and is calculates as:
				BalanceFactor = height(left subtree) − height(right subtree)

Design Patterns
================
- Singleton (Creational)
    Object that can only be instantiated once.
    Use case: Settings

	Singleton pattern is a class which always gives you the same object when you create
	an instance of the class.
	It’s used to ensure that all users of a class are using the same object.

- Prototype (Creational)
    Fancy word for "clone".
    Create clone object instead of extending object.

- Builder (Creational)
    Create object with methods instead of constructor.
    Examples:
        JQuery.

- Factory (Creational)
    Instead of using a new keyword to instantiate and object you use a function or method to do it for you.
    Use case: Cross platform app - Conditional checking to determine which button to show.

- Facade (Structural)
     A simplified API to hide low level details in your code base.
    Use case: Create facade class that contain the low level systems as dependencies which then simplifies their operation.
    Examples:
        JQuery.

- Proxy (Structural)
    Fancy word for "substitue".
    Replace target object with a proxy.
    Examples:
        Vue's reactivity system.

- Iterator (Behavioral)
    Traverse through a collection of objects. for loop.

- Observer (Behavioral)
    Many objects subscribe to events that are broadcast from another object.
    one-to-many relationship.
    Loop that unfolds over the dimension of time.

- Mediator (Behavioral)
    Is like a middle man or broker.
    Examples:
        1. Air traffic controller that sits between the runways & airplains to provide coordination & communication .
        2. Middleware

- State (Behavioral)

    Object behaves differently based on a finite amount of states.
    Examples:
        Finite State Machines


- Data Mapper Pattern
	- The interface of an object conforming to this pattern would include functions such as Create, Read, Update, and Delete, that operate on objects that represent domain entity types in a data store.
	- A Data Mapper is a Data Access Layer that performs bidirectional transfer of data between a persistent data store (often a relational database) and an in-memory data representation (the domain layer). The goal of the pattern is to keep the in-memory representation and the persistent data store independent of each other and the data mapper itself.
	Ex: SQLAlchemy library


JIT vs AOT
-----------
JIT - Compile TypeScript just in time for executing it.

	Compiled in the browser.
	Each file compiled separately.
	No need to build after changing your code and before reloading the browser page.
	Suitable for local development.

AOT - Compile TypeScript during build phase.

	Compiled by the machine itself, via the command line (Faster).
	All code compiled together, inlining HTML/CSS in the scripts.
	No need to deploy the compiler (Half of Angular size).
	More secure, original source not disclosed.
	Suitable for production builds.
