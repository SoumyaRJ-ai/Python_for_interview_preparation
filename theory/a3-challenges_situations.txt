challenges
----------
Use the STAR (Situation, Task, Action, Result) technique when answering example based questions

- Permissions related production issue challenge
	In current project, there is a Data pipeline
		- If a file is created in s3 bucket, AWS lambda will be triggered and we can
		  dump to another s3 bucket or to the database.
		- I created one in that way
		- But problem is that in production, due to sudden change in permission, in
		  one of the intermediate buckets, the process was stopped in middle I am
		  not aware of this issue because I am configured to report only if there are issues.
		- This is a production issue.
		- After this, I learned best practice
			○ To be careful; and guide all to be careful in changing permission.
			○ I created custom alert to notify such things
				§ I am reading CloudWatch logs  for doing these
	I have written an AWS Lambda which will be time triggered, on periodic basis and check
	for such logs and reports via SNS - Simple notification service

- Coding Performance Related challenge
	There is an ETL job, where there is a stream of XML records( which are valid SAP records).
	I wrote a microservice in AWS lambda to
		a) parse each of these XMLs,
		b) convert that to python dict,
		c) filter few key-values among them, and then,
		d) dump that to database
	It's a simple ETL job. So, as per design, I created unit and integration tests and then were working.
	When I did performance testing, I found that it took 19.5 seconds for this entire microservice.
	To add some math, say on average I get 10 XMLs per minute and each takes 19 seconds.
	For one minute book of work, I need to spend 190 seconds, or 3 minutes. Or, for one day of work, I need to process for 3 days.

	When using the cProfiler, I understood that it is taking more time at the xml to dictionary conversion.
	As I used xmltodict python module for this conversion, I went to code base of that module, pulled the exact code responsible for this conversion, and added to my code.
	Also, refactored my script further, which resulted in optimization from 19 seconds to 14 seconds.

	Still when seen in cProfiler, I found that it is taking time at the XML to dictionary conversion only.
	With further analysis, I understood that each XML has around 70-85 tags, but I am using only 20 among them.
	So, I decided to use regular expressions to cherry pick what I need, instead of converting the entire XML to dict.
	Finally, it resulted in optimization from 19.5 seconds, to 14 seconds, till just 5 seconds.
	It is around 400 % optimization.

	conclusions:
		1. Everytime, I will try to better optimize the resources, I mean, I will be proactive in the betterment of the project.
		2. I will follow the due process, follow-up with my team and manager, if i get a worthwhile idea.

- Long Run process ( Django web application)
	- In our current project, we created a dashboard for data analytics results.
	- Users can also initiate some customized reports. Once they request, it will take some time for response and creating and downloading the CSV file.
	- Over a period of time, as more complex reports and large processing is needed, those user requests used to be timed-out.
	- But, in the backend, they were successfully getting processed.
	- Upon investigation, I found that a solution to this problem
	- I created a distrubuted setup where all the frontend hit will create a celery job, instead of directly executing.
		1. user will

Project/task you are proud of
--------------------------------
	- In one project, we have data, to the tune of 18 millions records, for the daily data refresh, which can be either create or update.
	- Earlier, all these daily ETL jobs used to take around 3 hours.
	- I refactored these scripts to complete the data refresh, in just 30 min
	- I made use of async module, to concurrently run the jobs, which are not dependent on others

	- With inspiration from AWS Step functions, I created a framework to work with these ETL jobs.
	- we need to just feed this with a yaml file, with the microservice jobs named in sequential intendants, specifying the level, and also the dependencies.
	- My framework will take these jobs, create a data structure in such a way that
		- most dependent jobs will execute first, followed by less dependant jobs, and lastly the least dependent jobs.
		- And, the intermediate data is stored in pickle file.
		- In this way, if something is commonly needed by multiple jobs, instead of rehitting and repeating the process,
		I can reuse the already generated data from these pickle file.
	- Due to all this, all solved multiple jobs.
		1. Reduced the redundant ETL transactions
		2. Increased the isolation of problem, so, easy

difficulties working with technologies and how did you resolved it?
-------------------------------------------------------------------
	I implemented multiple scripts in AWS lambda.
	But lambda functions have problem with both time of execution and amount of memory consumption.
	Precisely, as we cant run a lambda function beyond 15 minutes, I rewrote the code, to split each
	functionality and coordinated them with AWS Step Functions.
	It is a promising solutions, as we can only coordinate the lambda functions to run either sequentially,
	or parallelly, but also we can feed result of one to the another.
	But, this kind of work distribution is not easy in all the cases.

	So, I explored and got to know about the container based architecture.
	I got to know that there were no limits on execution time and/or memory consumption.
	So, I implemented new scripts AWS using AWS ECR (Elastic Container Registry)
	and EKS (Elastic Kubernetes Service).
	I used docker for containerization and Kubernetes for orchestration of these pods.


Biggest Failures
----------------
- I worked on AWS lambda, when they were introduced, some 4 years back.
  At that test, there is no ecosystem for the local development, unittest, and mocking.

  I used to write test cases for other code workflows; but not for the aws lambda code.
  In a particular Aws lambda, i created logic to do recursive calls, based on an environment
  variable. But, when another person accidentally changes the environment variable, and it
  when unnoticed, code called itself recursively and it spawn multiple aws lambda.
  As the cloudwatch metrics and monitoring is not that active in those days, no emails triggered.

  But, luckily, we capped the AWS bill to some dollars. As the limit was reached, entire infra
  stopped.  We initially thought it was some cyber attack. But it took sometime for us to
  analyze the billing to figure the issue.

  Then, we approached AWS with this case; After hearing, they waved-off the bill; But it is
  the biggest failure.

  Lessons learned here were
	- no unit & integration tests -- means less reliability
	- Thinking of edge cases before moving to production
		- Using Monkey patching, and dynamically modifying classes/functions at runtime
		  to see the effect
	- Overall, I learned to do local setup using 'localstack' for working with those, without
	  even going to AWS Cloud.


Innovation - Process Improvement
--------------------------------
	- This is when I am working on one new product.
	  Generally, we are in the initial alpha/beta stages, we will focus more on adding new features.
	  Resolving bugs will be done, but in a slow process.
	  In that project, we followed the 2-week sprint.
	  so, If any enhancement/bug is coming after the start of new sprint, we placed them in backlog; and pulled only in the coming sprint.
	  Due to this, in this case, when a bug is raised, it takes two weeks to start and another two-weeks to work and release to production.
	  So, literally, after one month. By that time, half of people who raised the bugs, might have moved with different tool/process; or they lost interest.

	  I noticed it by analysing the unique user hits to our portal.
	  I could see with advertising, we could pull new users, but retaining the old/existing users became a challenge.

	  To solve this problem, I proposed an idea, which i learned from one of the blogs.
	  It is to combine both SCRUM and KANBAN.
		  SCRUM --> for feature development
		  KANBAN --> for bug management

	  Idea is that in initial days, 80% time as dedicated for feature development, and 20 % of the time for bug management.
	  Over period of time, when product development is most completed, we reduce the time for feature development and give more to bug management.

	  In this way, we can create new features as designed; yet address the bugs in timely manner based on their SLAs.
	  It actually helped increase the daily unique-user hits to our portal.

	  Initially my manager objected this idea, as we need to maintain two separate dashboards;
	  but I convinced him to experiment for a couple of sprints.
	  Then, after seeing the success, he was very happy.


Managing Tight deadlines
------------------------
	In that case,
		As we need to do ,
			I will pause the sprint,
	Let all team members to work in pairs
		Do code pairing to do fastly

	Say, one pair done a work, other pair will review it
	Like this, we can work , in war room,
	T get the things done

	There was a time when the
	Lessons Learned
		1) Never commit to a deadline you know you cannot meet.
		2) Once you have committed to a deadline, always meet it.
		3) Planning and time management are key.
		4) Concentration is the key to meeting deadlines and delivering good work.


Learning New tool
----------------------
- Initially, I will check the docs. Though i may not understand everything, but atleast, i will get a glance of what is what.
- Then, i will check with team members
	- Most importantly, i will learn what not to do. Because, i dont want to be counter-productive.
	- Then, Understand the roles in project and will get the approvals to access the code, and related dev tools.
	- Then, clone the code, get the development setup done and play on it.
	- I will learn module wise, by first going through  the unit tests, which will give a fair idea of assumptions and constraints, in the project.
	- THen, slowly , i will do end-to-end
- In that way, in each iteration, i will learn
- Then, i will try to add any new test cases, which i felt were not added; Also any additional comments or doc stings too.

And any specific Role based access,
And responsibilities involved

What tech stack would you use?
	- Why did you choose that architecture over another?
	- What challenges did you face and how did you overcome them?
	- How would you scale and optimize a given design?
	- If you led the project what would you have done differently?


What are you looking for in the new work?
-----------------------------------
- Good Work and  work culture
- IN terms of work,
	- Write coding, atleast 50%
	- Design solutions
	- Add tests to make the code reliable
- In the long term, I want to be an architect. I am making every step towards that journey

- In terms of work, it is almost match of what am doing now and your expectations
- I am to prove myself initially , and learn to add value to the project
- I want to be helpful , to more people, with my work

expectations from full stack developer
======================================
	To do frontend

	Backend

	And have db knowledge
	Db design

	Data flow design

	Cachesing to reduce burden on db

	CI/CD  process flow

	Monitoring


skills needed by developers
	- Patience, when debugging or troubleshooting
	- Persistence, when resolving some issues
	- Networking and communicating will all
	- being Proactive, in chasing clients for requirement gatherings, or filling the gaps in requirements


conflicts(workplace disagreements) with Collegues
------------------------------------
- Very rare, but sometimes will happen

- From all these years of experince, I can say that conflicts will be of two types.
	1) At the personal level, or personal motives
		- If so, manager and HR team, were there to deal with them.
	2) At the professional level
		- These should be dealed differently.
		- First, if we can analyse the root cause of the problem, it is easy to resolve it.
		- Mainy, Issues can be like
			- someone‘s ideas are being ignored
			- Or mistrust/misunderstanding
			- Or miscommunication, etc
		- Also, workplace disagreements often erupt when people experience an absence of relatedness

		- As a prevention, the best practices, i follow is
			- writing clearly, about the events and
			- communicating and getting consent from team members, and not bypassing them.
			- scheduling agenda meetings, before reaching out to stackholders, on what to speak.

		- Also, one should develop the patience and empathy, to think about
			- others actions,
			- thought process, which might have triggered, those actions.
			- What could be avoid such understanding/miscommunication
			- What could be best practice, to avoid such things again.


Mentoring, Juniors
------------------
- Frankly, I never wore the hat of a lead. But, helped and/or got help from any team members.
- We will try to help others, if they were struck

- Main problems with the junior developers are like
	- They may be confused with the requirement understanding, or
	- confused/struct in programming language, dev setup, or configurations related issues.

- I will give them clarity on anything, if they were confused.
- Ensure that they are learning from their mistakes.

- Will encourage them, to share new thoughts.
	- demystify the pros and cons, by discussions, and let them make the decisions, based on them.

- Also, We do weekly functionality based knowledge sharing sessions, where everyone need to share
	- Learnings of the week, either project related, outside, or even, at personal/fun related.

- I believe that sharing is caring
	- So, whenever, I learned something new, or
	  addressed some complex problem, or
	  discovered something, which is useful to other, I will share to all.


New developers
---------------
- Initially
	Will help in dev setup
	Will give read only access
	Caution on what NOT to do.
	And ask them to freely make their hands dirty
		Then, they don't have any fear

- Once, team is confident, I will give desired permission
- And slowly let me involve in each process and integrate them to day-to-day work


Urgent Production issue fix
============================
- First, I will inform the team.
- Then with manager consent, I will acknowledge the stackdholders
- Then, I  will debug step by step, I found root cause quickly, okay.
- Else,
	- We will divide the work among the team members to find the root cause
	- We wll divide the parts and identify the issue(s)
	- Once, we fond the issue, we need to replicate locally.
- Finally, identify the quickfix or rollback
	- Do the changes, push code, associate servicenow ticket, and handle it.

- create a JIRA for completely addressing the issue, place in backlog,
  and prioritise in next sprint planning, based on severity.
- document and inform the stackholdes of entire process, involved.
