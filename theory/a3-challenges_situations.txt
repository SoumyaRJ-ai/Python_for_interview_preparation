challenges
----------
Use the STAR (Situation, Task, Action, Result) technique when answering example based questions

- Permissions related production issue challenge
	In current project, there is a Data pipeline
		- If a file is created in s3 bucket, AWS lambda will be triggered and we can dump to another s3 bucket or to the database.
		- I created one in that way
		- But problem is that in production, due to sudden change in permission, in one of the intermediate buckets, the process was stopped in middle I am not aware of this issue because I am configured to report only if there are issues.
		- This is a production issue.
		- After this, I learned best practice
			○ To be careful; and guide all to be careful in changing permission.
			○ I created custom alert to notify such things
				§ I am reading CloudWatch logs  for doing these
	I have written an AWS Lambda which will be time triggered, on periodic basis and check
	for such logs and reports via SNS - Simple notification service

- Coding Performance Related challenge
	There is an ETL job, where there is a stream of XML records( which are valid SAP records).
	I wrote a microservice in AWS lambda to
		a) parse each of these XMLs,
		b) convert that to python dict,
		c) filter few key-values among them, and then,
		d) dump that to database
	It's a simple ETL job. So, as per design, I created unit and integration tests and then were working.
	When I did performance testing, I found that it took 19.5 seconds for this entire microservice.
	To add some math, say on average I get 10 XMLs per minute and each takes 19 seconds.
	For a one minute book of work, I need to spend 190 seconds, or 3 minutes. Or, for one day of work, I need to process for 3 days.

	When using the cProfiler, I understood that it is taking more time at the xml to dictionary conversion.
	As I used xmltodict python module for this conversion, I went to code base of that module, pulled the exact code responsible for this conversion, and added to my code.
	Also, refactored my script further, which resulted in optimization from 19 seconds to 14 seconds.

	Still when seen in cProfiler, I found that it is taking time at the XML to dictionary conversion only.
	With further analysis, I understood that each XML has around 70-85 tags, but I am using only 20 among them.
	So, I decided to use regular expressions to cherry pick what I need, instead of converting the entire XML to dict.
	Finally, it resulted in optimization from 19.5 seconds, to 14 seconds, till just 5 seconds.
	It is around 400 % optimization.

	conclusions:
		1. Everytime, I will try to better optimize the resources, I mean, I will be proactive in the betterment of the project.
		2. I will follow the due process, follow-up with my team and manager, if I get a worthwhile idea.

- ETL process to query S3 data using Athena and expose it via API Gateway:
	(Helped Team address a critical problem)
	When I joined this project, the data science team was struggling with slow ad-hoc analysis on large datasets stored in S3. Querying via EMR clusters was complex and time consuming.

	I proposed we use Athena to allow serverless SQL queries directly against S3. The setup was straightforward - I defined schema through table DDLs and pointed Athena to the S3 location.

	This alone accelerated the team's exploratory analysis. But they also wanted to build interactive dashboards over this data.

	That's when I built an architecture to trigger Lambda functions from Athena, process the result sets, and expose JSON APIs via API Gateway.

	Securing access to the underlying S3 bucket while exposing the APIs required some thoughtful IAM policies. I used query result triggers and handled pagination to fetch large result sets from S3 efficiently.

	With this end-to-end architecture in place, the data science team was able to connect Power BI directly to the APIs I built and create beautiful dashboards on their analysis.

	The automation and speed unlocked by this serverless pipeline made our analyses 10x more productive. API Gateway's caching also helped sustain dashboard performance under load.

	In the end, leveraging Athena's DDLs, Lambda triggers, and API Gateway to build a scalable data analysis pipeline was a very rewarding experience. I learned how small pieces of serverless tech can unlock huge value.

- Long Run process ( Django web application)
	- In our current project, we created a dashboard for data analytics results.
	- Users can also initiate some customized reports. Once they request, it will take some time for response and creating and downloading the CSV file.
	- Over a period of time, as more complex reports and large processing is needed, those user requests used to be timed-out.
	- But, in the backend, they were successfully getting processed.
	- Upon investigation, I found that a solution to this problem
	- I created a distributed setup where all the frontend hit will create a celery job, instead of directly executing.
		1. user will pass to celery and return celery id
		2. Subsequently, users  can come and poll with that id to know the status

- Fixing a Critical Bug
	- The most challenging situation I encountered at work was when I was tasked with fixing a critical bug in a production system with a tight deadline.
	- The bug was causing issues with data integrity and was affecting multiple users.
	- It was a challenging situation because there was a lot of pressure to resolve the issue quickly,
	  while also ensuring that the fix was thoroughly tested and didn't introduce any new issues.
	- To resolve the issue, I first conducted a thorough investigation to understand the root cause of the problem.
	- I then implemented a fix that addressed the immediate issue, while also implementing additional tests to prevent the bug from recurring in the future.
	- Finally, I worked closely with the testing team to ensure that the fix was properly tested before it was deployed to production.

Project/task you are proud of
--------------------------------
	- In one project, we have data, to the tune of 18 millions records, for the daily data refresh, which can be either create or update.
	- Earlier, all these daily ETL jobs used to take around 3 hours.
	- I refactored these scripts to complete the data refresh, in just 30 min
	- I made use of async module, to concurrently run the jobs, which are not dependent on others

	- With inspiration from AWS Step functions & Airflow DAGs, I created a framework to work with these ETL jobs.
	- we need to just feed this with a yaml file, with the microservice jobs named in sequential intendants, specifying the level, and also the dependencies.
	- My framework will take these jobs, create a data structure in such a way that
		- most dependent jobs will execute first, followed by less dependent jobs, and lastly the least dependent jobs.
		- And, the intermediate data is stored in pickle file.
		- In this way, if something is commonly needed by multiple jobs, instead of rehitting and repeating the process,
		I can reuse the already generated data from these pickle file.
	- Due to all this, all solved multiple jobs.
		1. Reduced the redundant ETL transactions
		2. Increased the isolation of problem, so, easy

difficulties working with technologies and how did you resolved it?
-------------------------------------------------------------------
	I implemented multiple scripts in AWS lambda.
	But lambda functions have problem with both time of execution and amount of memory consumption.
	Precisely, as we cant run a lambda function beyond 15 minutes, I rewrote the code, to split each
	functionality and coordinated them with AWS Step Functions.
	It is a promising solutions, as we can only coordinate the lambda functions to run either sequentially,
	or parallelly, but also we can feed result of one to the another.
	But, this kind of work distribution is not easy in all the cases.

	So, I explored and got to know about the container based architecture.
	I got to know that there were no limits on execution time and/or memory consumption.
	So, I implemented new scripts AWS using AWS ECR (Elastic Container Registry)
	and EKS (Elastic Kubernetes Service).
	I used docker for containerization and Kubernetes for orchestration of these pods.


Biggest Failures
----------------
- I worked on AWS lambda, when they were introduced, some 4 years back.
  At that test, there is no ecosystem for the local development, unittest, and mocking.

  I used to write test cases for other code workflows; but not for the aws lambda code.
  In a particular Aws lambda, I created logic to do recursive calls, based on an environment variable.
  But, when another person accidentally changes the environment variable, and it when unnoticed, code called itself recursively and it spawn multiple aws lambda.
  As the cloudwatch metrics and monitoring is not that active in those days, no emails triggered.

  But, luckily, we capped the AWS bill to some dollars. As the limit was reached, entire infra stopped.
  We initially thought it was some cyber attack. But it took sometime for us to analyze the billing to figure the issue.

  Then, we approached AWS with this case; After hearing, they waved-off the bill; But it is the biggest failure.

  Lessons learned here were
	- no unit & integration tests -- means less reliability
	- Thinking of edge cases before moving to production
		- Using Monkey patching, and dynamically modifying classes/functions at runtime to see the effect
	- Overall, I learned to do local setup using 'localstack' for working with those, without even going to AWS Cloud.

	- And, recently, I saw news that AWS is LIMITING these recursive loops to 16, by default, between lambda, SQS & SNS

Innovation - Process Improvement
--------------------------------
	- This is when I am working on one new product.
	  Generally, we are in the initial alpha/beta stages, we will focus more on adding new features.
	  Resolving bugs will be done, but in a slow process.
	  In this project, we followed the 2-week sprint.
	  so, If any enhancement/bug is coming after the start of a new sprint, we placed them in backlog; and pulled only in the coming sprint.
	  Due to this, in this case, when a bug is raised, it takes two weeks to start and another two-weeks to work and release to production.
	  So, literally, after one month. By that time, half of the people who raised the bugs, might have moved with different tool/process; or they lost interest.

	  I noticed it by analysing the unique user hits to our portal.
	  I could see with advertising, we could pull new users, but retaining the old/existing users became a challenge.

	  To solve this problem, I proposed an idea, which I learned from one of the blogs.
	  It is to combine both SCRUM and KANBAN.
		  SCRUM --> for feature development
		  KANBAN --> for bug management

	  Idea is that in initial days, 80% time was dedicated for feature development, and 20 % of the time for bug management.
	  Over period of time, when product development is most completed, we reduce the time for feature development and give more to bug management.

	  In this way, we can create new features as designed; yet address the bugs in timely manner based on their SLAs.
	  It actually helped increase the daily unique-user hits to our portal.

	  Initially my manager objected this idea, as we need to maintain two separate dashboards;
	  but I convinced him to experiment for a couple of sprints.
	  Then, after seeing the success, he was very happy.


Managing Tight deadlines
------------------------
	In that case,
		As we need to do,
			I will pause the sprint,
	Let all team members to work in pairs
		Do code pairing to do fastly

	Say, one pair done a work, other pair will review it
	Like this, we can work, in war room,
	To get the things done

	There was a time when the
	Lessons Learned
		1) Never commit to a deadline you know you cannot meet.
		2) Once you have committed to a deadline, always meet it.
		3) Planning and time management are key.
		4) Concentration is the key to meeting deadlines and delivering good work.


Learning New tool
----------------------
- Initially, I will check the docs. Though i may not understand everything, but atleast, i will get a glance of what is what.
- Then, I will check with team members
	- Most importantly, I will learn what not to do. Because, I dont want to be counter-productive.
	- Then, Understand the roles in project and will get the approvals to access the code, and related dev tools.
	- Then, clone the code, get the development setup done and play on it.
	- I will learn module wise, by first going through the unit tests, which will give a fair idea of assumptions and constraints, in the project.
	- Then, slowly, I will do end-to-end
- In that way, in each iteration, I will learn
- Then, I will try to add any new test cases, which I felt were not added; Also any additional comments or doc stings too.

And any specific Role based access,
And responsibilities involved

What tech stack would you use?
	- Why did you choose that architecture over another?
	- What challenges did you face and how did you overcome them?
	- How would you scale and optimize a given design?
	- If you led the project what would you have done differently?

- Ideal process for delivering a solution to customers
-------------------------------------------------------
	- first gather requirements and thoroughly understand the problem that needs to be solved.
	- I then work closely with the customer to design a solution that meets their needs,
	  while also taking into account scalability, maintainability, and security considerations.
	- Throughout the development process, I prioritize communication and ensure that the customer is kept informed of progress and any issues that arise.
	- To ensure that the customer is delighted with the solution, I make sure to thoroughly test and debug the code, and provide comprehensive documentation to make it easy for the customer to use and maintain the solution.
	- I also prioritize user experience and design, ensuring that the solution is intuitive and user-friendly.
	- Finally, I am always open to feedback and willing to make changes to the solution as needed to ensure that the customer is completely satisfied.

What are you looking for in the new work?
-----------------------------------
	- Good Work and work culture; and
	- IN terms of work,
		- Write coding, atleast 50%
		- Design solutions
		- Add tests to make the code reliable
	- In the long term, I want to be an architect. I am making every step towards that journey
	- Interested in learning new techs, as per project requirements
	- In terms of work, it is almost match of what am doing now and your expectations
	- I am to prove myself initially , and learn to add value to the project
	- I want to be helpful, to more people, with my work


How to deal with client dissatisfy with your work ?
---------------------------------------------------
	1) Stay calm and professional.
		- It's important to stay calm and professional, even if the client is upset.
		- Getting angry or defensive will only make the situation worse.
	2) Listen to the client's concerns.
		- The first step to resolving a problem is to understand what the problem is.
		- Take the time to listen to the client's concerns and try to see things from their perspective.
	3) Apologize for any inconvenience.
		- Even if you don't think you did anything wrong, it's always a good idea to apologize for any inconvenience the client has experienced.
		- This shows that you care about their satisfaction and that you're willing to take steps to make things right.
	4) Offer a solution.
		- Once you understand the client's concerns, you can offer a solution.
		- This could involve fixing the problem, refunding the client's money, or offering them a discount on future work.
	5) Follow up to make sure the client is satisfied.
		- Once you've offered a solution, be sure to follow up with the client to make sure they're satisfied.
		- This shows that you're committed to resolving the issue and that you care about their satisfaction.

	In addition,
	 - Be proactive
		- We should not wait for the client to come to us with a complaint.
		- If you know there's a problem, i will reach out to the client and let them know that we are working on a solution.
	- Be transparent.
		Keep the client updated on your progress and let them know what we're doing to resolve the issue.
	- Be flexible.
		Be willing to work with the client to find a solution that works for both of us.

	- Be positive.
		- Even though the situation may be difficult, it's important to stay positive and focused on resolving the issue.

expectations from full stack developer
--------------------------------------
	Technical Skills:
		- Proficiency in frontend languages/frameworks like HTML, CSS, JavaScript, React etc.
		- Proficiency in backend languages/frameworks like Python, Ruby, Node.js, .NET etc.
		- Expertise in databases like SQL, MongoDB, working with REST APIs
		- Version control with Git, experience deploying code and managing releases
		- Understanding of web/cloud infrastructure and hosting platforms
		- Ability to write clean, testable and well-documented code
		- Troubleshooting issues across the full technology stack

	Soft Skills:
		- Communication skills to collaborate with various teams like product managers, UX designers etc.
		- Organizational skills to prioritize tasks and work on both frontend and backend development
		- Attention to detail in order to write functioning code as well as robust tests
		- Willingness to constantly learn and master new languages, frameworks, tools
		- Ability to understand business requirements and translate them to technical solutions
		- Comfortable working in an agile development environment
		- Self motivated and able to work independently as well as in a team

- skills needed by developers
-----------------------------
	- Patience, when debugging or troubleshooting
	- Persistence, when resolving some issues
	- Networking and communicating will all
	- being Proactive, in chasing clients for requirement gatherings, or filling the gaps in requirements

- who is a good developer?
	In my opinion, a good developer is someone who is
		- passionate about their work, has a strong foundation in programming principles, and
		- is able to learn and adapt quickly.
	Good developers also have a focus on
		- writing clean, maintainable code that is well-documented and tested.
	Communication skills are also key, as developers often work in teams and need to be able to clearly explain their work and ideas.

	On the other hand, a bad developer is someone who is
		- not committed to their work,
		- lacks a solid foundation in programming principles, and
		- is not willing to learn and adapt to new technologies or methodologies.
		- They may also be prone to writing sloppy, untested code and not taking responsibility for their mistakes.


conflicts(workplace disagreements) with Colleagues
------------------------------------
- Very rare, but sometimes will happen

- From all these years of experience, I can say that conflicts will be of two types.
	1) At the personal level, or personal motives
		- If so, the manager and HR team were there to deal with them.
	2) At the professional level
		- These should be dealt differently.
		- First, if we can analyse the root cause of the problem, it is easy to resolve it.
		- Mainy, Issues can be like
			- someone‘s ideas are being ignored
			- Or mistrust/misunderstanding
			- Or miscommunication, etc
		- Also, workplace disagreements often erupt when people experience an absence of relatedness

		- As a prevention, the best practices, I follow is
			- writing clearly, about the events and
			- communicating and getting consent from team members, and not bypassing them.
			- scheduling agenda meetings, before reaching out to stakeholders, on what to speak.

		- Also, one should develop the patience and empathy, to think about
			- others actions,
			- thought process, which might have triggered, those actions.
			- What could be avoid such understanding/miscommunication
			- What could be best practice, to avoid such things again.

Mentoring, Juniors
------------------
	- Frankly, I never wore the hat of a lead. But, helped and/or got help from any team members.
	- We will try to help others, if they were struck

	- Main problems with the junior developers are like
		- They may be confused with the requirement understanding, or
		- confused/struct in programming language, dev setup, or configurations related issues.

	- I will give them clarity on anything, if they are confused.
	- Ensure that they are learning from their mistakes.

	- Will encourage them to share new thoughts.
		- demystify the pros and cons, by discussions, and let them make the decisions, based on them.

	- Also, We do weekly functionality based knowledge sharing sessions, where everyone need to share
		- Learnings of the week, either project related, outside, or even, at personal/fun related.

	- I believe that sharing is caring
		- So, whenever, I learned something new, or
		  addressed some complex problem, or
		  discovered something, which is useful to others, I will share to all.

New developers
---------------
	- Initially
		Will help in dev setup
		Will give read only access
		Caution on what NOT to do.
		And ask them to freely make their hands dirty
			Then, they don't have any fear

	- Once, team is confident, I will give desired permission
	- And slowly let me involve in each process and integrate them to day-to-day work


Urgent Production issue fix
============================
	- First, I will inform the team.
	- Then with manager consent, I will acknowledge the stackdholders
	- Then, I will debug step by step, I found root cause quickly, okay.
	- Else,
		- We will divide the work among the team members to find the root cause
		- We wll divide the parts and identify the issue(s)
		- Once, we fond the issue, we need to replicate locally.
	- Finally, identify the quickfix or rollback
		- Do the changes, push code, associate servicenow ticket, and handle it.

	- create a JIRA for completely addressing the issue, place in backlog,
	  and prioritise in next sprint planning, based on severity.
	- document and inform the stackholdes of entire process, involved.



TODO
	- How did you debug coding problem
