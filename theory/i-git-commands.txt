Git Commands
============
- git commit vs git push?
	git commit  - puts your changes into your local repo,
	git push    - sends your changes to the remote location.

- git fetch vs git pull?

	git pull pulls down from a remote and instantly merges.
	git fetch is similar to pull but doesn't merge.

	git fetch - tells your local git to retrieve the latest meta-data info from the original
					(yet doesn't do any file transferring. It's more like just checking to see if
					there are any changes available).
	git pull  - does git fetch AND brings (copy) those changes from the remote repository.

			git fetch + merge = git pull

- Git merge vs git rebase

	Git rebase and merge both integrate changes from one branch into another.
	Git rebase moves a feature branch into a master. Git merge adds a new commit, preserving the history.

	Merge: Moves changes from a branch to another and creates a merge commit.
	History is preserved.
		(Feature branch context) When to Merge: Merge if target branch has no changes.

	Rebase: Moves changes from a branch to another but alters the history by moving
	the origin branch's starting point. It does not create a merge commit.

	(Feature branch context) When to Rebase: Pull and rebase if there are changes on target branch.

- git remote vs git clone

	git remote add just creates an entry in your git config that specifies a name for a particular URL.
	You must have an existing git repo to use this.
	git clone creates a new git repository by copying an existing one located at the URI you specify

- git revert

	Makes a reverse-commit.
	- It is a forward-moving undo operation that offers a safe method of undoing changes.
	- Instead of deleting or orphaning commits in the commit history, a revert will create a new commit that inverses the changes specified.

	git revert commit-hash does not alter your commit history but makes a new commit that reverts the changes that were committed as part of the commit.

	# Reset the index and working tree to the desired tree
	# Ensure you have no uncommitted changes that you want to keep
	git reset --hard 56e05fced

	# Move the branch pointer back to the previous HEAD
	git reset --soft HEAD@{1}

	git commit -m "Reverting to the state of the project at f414f31"

- undo previous commit
	# Checkout a new temp branch based on one history commit
	# (command to get history commit hashes: git log --oneline)
	git checkout <last_known_good_commit_hash>

	# Delete the original develop branch
	git branch -D develop
	# Create a new develop branch based on the temp branch
	git checkout -b develop

	# Force update the remote with the new branch
	git push -f origin develop

- To remove unstage files,
	git reset HEAD -- path/to/file

- git bisect
	- to discover the commit that has introduced a bug in the code

- To squash (merge) last three commmits
	git reset --soft HEAD~3 &&
	git commit

	To update the commit message,
		git commit --edit -m"$(git log --format=%B --reverse HEAD..HEAD@{1})"

- "git blame" shows line by line `last` commit history of a file,
		when and by whom the line was updated

- Stashing
	- To manage the temporary code, we can use git stashing
		- For single stash,
			git stash  --> will save current uncommitted changes
			git stash pop --> will restore saved uncommitted changes

			git stash save 'add: something' --> adds a tag for saved uncommitted changes, such that we can restore specifically
			git stash list      --> will list all the saved stashes
			git stash apply 0   --> will restore the 0th index stash


- Git configuration
	git config --global user.name "Your name"
	git config --global user.email "user@domain.com"

- Starting a project
	git init [project name]
	git clone [project url]

- Removing file from directory
	git rm [file]

- Status of working directory
	git status

- Add a file to the staging area
	git add [file]

- Discard changes in working directory
	git checkout -- [file]

- commit to local
	git commit

- Revert the repository
	git reset [file]

	git reset also has three options
		--hard - Both the Worktree and the Index match the files in the new commit you moved to
		--mixed (default) - Worktree remains as it was before you ran git reset and Index matches the files in the new commit you moved to
		--soft - Worktree and Index both remain as they were before you ran git reset

- List all local branches
	git branch -a

- Fetch changes from remote and merge current branch with its upstream
	git pull [remote]

- Join specified [FROM NAME] branch
	git merge [FROM NAME]

- Create new branch
	git branch [branch_name]

- Push local changes to the remote
	git push [--tags] [remote]

- Remove selected branch
	git branch -d [name]

- Fetch changes from the remote
	git fetch [remote]

- Switch current branch to specified branch
	git checkout [-b] [branch_name]


https://ohshitgit.com/
