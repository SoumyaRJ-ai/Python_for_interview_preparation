JavaScript
==========
== (two equals) is value level equivalence
=== (three equals) is object level equivalence, means it will check for data type too

	4 == 4 and 4 == '4'  results in true,
	4 === 4 also resuts true, but
	4 === '4' results in false, as one is int and other is string type.

setInterval function
	It is a window function method that calls given function at specified intervals (say in milliseconds),
	until clearInterval() function is called, or the window is closed.

	To execute the function only for specific time, we can use the setTimeout() method.

JSON.stringify()
	This method converts a JavaScript value, or object, to a JSON string

JSON.parse()
	This method parses a JSON string, constructing the JavaScript value or object described by the string.

		const json = '{"result":true, "count":42}';
		const obj = JSON.parse(json);

		console.log(obj.count);
		// expected output: 42

		console.log(obj.result);
		// expected output: true


JavaScript Hoisting
	refers to the process whereby the interpreter appears to move the
	declaration of functions, variables or classes to the top of their
	scope, prior to execution of the code.
	Hoisting allows functions to be safely used in code before they are declared.

==================
angular
=========
AngularJS lifecycle hooks
	Angular gives us 8 hooks to allow us to tap into the lifecycle
	of our components and trigger actions at specific points in the lifecycle.

	1. ngOnChanges
	2. ngOnInit
	3. ngDoCheck
	4. ngAfterContentInit
	5. ngAfterContentChecked
	6. ngAfterViewInit
	7. ngAfterViewChecked
	8. ngOnDestroy

constructor
	- constructor in Angular is mainly to inject dependencies into the component class.

ngoninit vs constructor
	- constructor initializes class members, but ngOnInit will do actual work.
	- First contructor initializes, and then ngOnInit is called.

	import { Component, OnInit } from '@angular/core';

	export class App implements OnInit {
	  constructor() {
		 // Called first time before the ngOnInit()
	  }

	  ngOnInit() {
		 // Called after the constructor and called  after the first ngOnChanges()
	  }
	}

Data binding in AngularJS
	is the synchronization between the model and the view.
	When data in the model changes, the view reflects the change, and
	when data in the view changes, the model is updated as well.


two-way data binding in Angular is
	used to display information to the end user and allows the end user
	to make changes to the underlying data using the UI.
	This makes a two-way connection between the view (the template) and
	the component class. This is similar to the two-way binding in WPF.


String Interpolation
	in Angular 8 is a one-way data-binding technique that
	is used to transfer the data from a TypeScript code to an HTML template (view).
	It uses the template expression in double curly braces to display the data
	from the component to the view.


Pipes
	- pipes are functions used on template expressions to accept an input value and return tranformed value.
	- Some commonly used predefined Angular pipes are:
		1) DatePipe		: Formats a date value.
		2) UpperCasePipe: Transforms text to uppercase.
		3) LowerCasePipe: Transforms text to lowercase.
		4) CurrencyPipe	: Transforms a number to the currency string.
		5) PercentPipe	: Transforms a number to the percentage string.
		6) DecimalPipe	: Transforms a number into a decimal point string.

Pure and Impure Pipes
	- A pure pipe (the default) is only called when Angular detects a change in the value or the parameters passed to a pipe.
	- An impure pipe is called for every change detection cycle no matter whether the value or parameter(s) changes.

promises
	to execute asynchronous functions that use callbacks,
	while emitting and completing (resolving or rejecting) one value
	at a time.
	When using an Angular Promise, you are enabled to emit a single event from the API

promise vs callbacks
	A callback function is passed as an argument to another function whereas
	Promise is something that is achieved or completed in the future.
	In JavaScript, a promise is an object and we use the promise constructor to initialize a promise.

	we, generally, pass a callback into a function that would then get called upon
	completion in order to get the result of something.
	In promises, however, you attach callbacks on the returned promise object.

promises vs observables
	promises
		are not lazy: execute immediately after creation.
		Emit a single value at a time.
		Are not cancellable.
		Push errors to the child promises.

	Observables
		are lazy: they're not executed until we subscribe to them using the subscribe() method.
		Emit multiple values over a period of time.
		Have subscriptions that are cancellable using the unsubscribe() method, which stops the listener from receiving further values.
		Deliver errors to the subscribers.
		Provide the map for forEach, filter, reduce, retry, and retryWhen operators.

Dependency injection
	is basically providing the objects that an object needs (its dependencies) instead of having it construct them itself.

	It's a very useful technique for testing, since it allows dependencies to be mocked or stubbed out.

scope hierarchy
	Means each view has its own $scope (which is a child of the root scope), so whatever variables one view controller sets on its $scope variable, those variables are invisible to other controllers.

$scope vs scope
	in case of dependency injection the scope object is received as $scope while in case of non-dependency injection scope object is received as scope or with any name.

==================
React
=========
React component lifecycle
	1) INITIALIZATION
		- setup props and state
	2) MOUNTING
		- constructor->componentWillMount->render->componentDidMount//Birth
	3) UPDATE
		- shouldComponentUpdate
			->componentWillUpdate ->render->componentDidUpdate //Growth
	4) UNMOUNTING
		- componentWillUnmount //Death


When we want to implement Redux in the React, we also need three things: save store state in React. get the state in React component. dispatch action in React component.


- react functional components vs class components
	- A functional component is just a plain JavaScript function which accepts props as an argument and returns a React element.
	- A class component requires to extend from React. Component and create a render function which returns a React element.

	- Class components are used as container components to handle state management and wrap child components.
	- Functional components generally are just used for display purposes - these components call functions from parent components to handle user interactions or state updates.

// note: useState, useEffect, and Component can also be imported directly
// functional: `import React, { useState }, { useEffect } from "react";
// class: `import React, { Component } from "react";`

// FUNCTIONAL COMPONENT
	import React from "react";

	// props are passed as parameter
	const FunctionalComponent = (props) => {

	  // equal to constructor on handling state
	  const [count, setCount] = React.useState(0);

	  // equal to componentDidMount()
	  React.useEffect(() => {
		console.log("Hello");
	  }, []);

	  // equal to componentWillUnmount()
	  React.useEffect(() => {
		return () => {
		  console.log("Bye");
		};
	  }, []);

	  return (
		<div>
		  <h1>Hello, {props.name}</h1>
		  <p>count: {count}</p>
		  <button onClick={() => setCount(count + 1)}>Click</button>
		</div>
	  );
	};

// CLASS COMPONENT
	import React from "react";

	// component can also be imported directly
	class ClassComponent extends React.Component {

	  // sometimes using this.state = {...} directly may work
	  constructor(props) {
		super(props);
		this.state = {
		  count: 0
		};
	  }

	  componentDidMount() {
		console.log("Hello");
	  }

	  componentWillUnmount() {
		console.log("Bye");
	  }

	  render() {
		const { name } = this.props;
		return (
		  <div>
			<h1>Hello, { name }</h1>
			<p>count: {this.state.count} times</p>
			<button onClick={() => this.setState({ count: this.state.count + 1 })}>
			  Click
			</button>
		  </div>
		);
	 }
	}


create react app
	1) Install TypeScript globally
		npm install -g typescript

	2) Check typescript version
		tsc -v

	3) create react app with typescript
		npx create-react-app frontend --template typescript

	4) Install modules
		npm install --save ag-grid-community ag-grid-react

	5) For local development,
		npm start

	6) For production push,
		npm run build prod
		npm install -g serve
		serve -s build

==================
tsconfig.json

	{
	  "compilerOptions": {
		// No module system, concatenated file
		"module": "none",

		// Set React as the JSX factory
		"jsx": "react",

		// Resolve modules using Node-resolution algorithm
		"moduleResolution": "node",

		// Target ES6 for more modern browsers
		"target": "es6",

		// Include typings from built-in lib declarations
		"lib": ["es2015", "dom", "dom.iterable"],

		// Include module source maps for debugging
		"sourceMap": true,

		// Output to single concatenated file
		"outFile": "dist/bundle.js"
	  },
	  "include": ["src"]
	}


aggrid usage case
