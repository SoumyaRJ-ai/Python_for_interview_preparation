- SOLID
	- Single responsibility  - one method/function one job 
	- Open-closed principle  - open for extension, but closed for modification
	- Liskoc substitution	 - objects of a superclass shall be replaceable with objects of its subclass 
	- Interface Segregration - client should not be forced to depens on methods its does not use 
	- Dependency Inversion   - Depend on interface decouping 
	
- Data Structures
	- https://www.interviewbit.com/data-structure-interview-questions/
	- Used for efficient organization and modification of data 
	- Types
		1) Linear Data structures:
			- If elemenets of a data structure result in a sequence or a linear list 
			- Ex: Arrays, Linked List, Stacks, Queues, etc
		2) Non-Linear Data structures:
			- If elemenets of data structure results in a way that traversal of nodes is not done in a sequenctial manner
			- Ex: Trees, Graphs, Tables, sets, etc
	- Arrays
		- Arrays are the collection of similar types of data stored at contiguous memory locations.
		- It is the simplest data structure where the data element can be accessed randomly just by using its index number.
	- Binary Trees
		- A binary Tree is a special type of tree where each node can have at most two children. 
		- Binary tree is generally partitioned into three disjoint subsets, i.e. the root of the tree, left sub-tree and 
		  right sub-tree.
	- AVL Trees
		- AVL trees are height balancing BST. 
		- AVL tree checks the height of left and right sub-trees and assures that the difference is not more than 1. 
		- This difference is called Balance Factor and is calculates as:
				BalanceFactor = height(left subtree) âˆ’ height(right subtree)
