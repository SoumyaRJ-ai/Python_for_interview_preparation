		=====================================================
								Python
		=====================================================

1.	How are python arguments passed, by reference or by value?
Ans)
	Immutable objects(int,float,str,tuple) -> call by value by default
					with global declaration, call by reference
	Mutable objects(list, set, dict) -> call by reference

		def add_one(num):
			num += 1

		num = 10
		add_one(num)
		print(num)  # 10 -- CALL BY VALUE

		global num1
		def add_one():
			global num1
			num1 += 1

		num1 = 10
		add_one()
		print(num1) # 11  -- CALL BY REFERENCE


		def change_value(mydict):
			mydict['fruit'] = 'apple'

		mydict = {'fruit': 'mango'}
		change_value(mydict)
		print(mydict)  # {'fruit': 'apple'} -- CALL BY REFERENCE


2.	Provide an example of list comprehension & an example of dictionary comprehension.
Ans)
	[i for i in range(6)]     # List Comprehension
	{i for i in range(6)}     # Set Comprehension
	{i:i*i for i in range(6)} # Dict Comprehension

3.	What is pass?
Ans)
	for i in range(6):
		if i == 5:
			pass
		print(i, end=' ')

	#OUTPUT - 0, 1, 2, 3, 4, 5

4.	What is __main__?
Ans) Every script has a metadata variable called __name__.
	when a script is called directly, its value is __main__.
	But, when imported as module, its value is same as the script name.

5.	Provide an example of using map()
Ans)
		def double(x):
			return x * 2

		list(map(double, range(6)))   # [0, 2, 4, 6, 8, 10]

6.	Write a decorator that can be used to print the input & output of a decorated function.
Ans)
	from functools import wraps
	def printer(func):
		@wraps(func)
		def inner(*args, **kwargs):
			print('INPUT -', args, kwargs)
			output = func(*args, **kwargs)
			print('OUTPUT -', output)
			return output
		return inner

7.	What's a context manager? Write a class that can be used as a context manager.
Ans) Instance created within the "with" block is held to close it, once it is out of
	the indentation block.
	Popularly used with file handler, socker handler, db connection handler, ...

	class MyOpen:
		def __init__(self, filename, mode='r'):
			self.filename = filename
			self.mode = mode
			self.file_handler = None

		def __enter__(self):
			self.file_handler = open(self.filename, self.mode)
			return self.file_handler

		def __exit__(self, exc_type, exc_val, exc_tb):
			if self.file_handler:
				self.file_handler.close()


	with MyOpen('myfile.txt', 'w') as fh:
		fh.write('some content')


8.	Provide 3 different examples of python string formatting syntax.
Ans)
	Method 1:
		'name=%s age=%d salary=%f'%('John', 23, 213.2)

	Method 2:
		'name={0} age={1} salary={2}'.format('John', 23, 213.2)

	Method 3:
		name = 'John'
		age = 23
		salary = 213.2
		f'name={name} age={age} salary={salary}'

9.	How do you determine whether a for loop exhausted the input list?
Ans)
	case 1:
		for i in range(6):
			pass
		else:
			print('ALL LOOPS executed')   # this condition will execute

	case 2:
		for i in range(6):
			if i == 5:
				continue
		else:
			print('ALL LOOPS executed')   # NOT EXECUTED, as one loop missed in middle

10.	What does *args and **kwargs mean?
Ans)
	Both are used for making variadic functions
	def variable_arguments(*args):
		print(args)

	variable_arguments() # ()
	variable_arguments(1, 2) # (1, 2)
	variable_arguments(1, 2.3, True, None) # (1, 2.3, True, None)

	def variable_keyword_arguments(**kwargs):
		print(kwargs)

	variable_keyword_arguments() # {}
	variable_keyword_arguments(name='John') # {'name'='John'}
	variable_keyword_arguments(a=1,b=2,c=4) # {'a':1,'b':2,'c':4}

11.	How do you call a parent class method?
Ans)
	class Parent:
		def p_method(self):
			print('p-method')
	class Child(Parent): # Inheritance
		pass

	c = Child() # creating child class instance
	c.p_method() # calling parent class method

12.	How does python import work?
Ans)
	when we try to import a module, it will check for it in the sys.path list.
	we can tweek it to add/prioritize any specific folder path where custom
	module is present.

	It looks for the python script with the imported name, and imports
	It will create a .pyc(byte code) file for the first time and subsequently
	uses the .pyc file, until there is no change in the corresponding .py file.

	when importing a script as module, it will execute all code except for the
	code mentioned under the below condition:
		__name__ == '__main__'
	when importing as module , __name__ is equal to script name.


13.	Provide two ways of reversing a python list without writing a for loop.
Ans)
	mylist = [1,2,3,4,5,6,]
	mylist[::-1]  # OUTPUT: [6, 5, 4, 3, 2, 1]
	list(reversed(mylist)) # OUTPUT: [6, 5, 4, 3, 2, 1]

14.	What’s the output of the following code:
	list = [1,2,3,4,5,6,]
	print(list[10:])
Ans)   []


15.	What’s wrong with:
	try:
		some_code()
	except:
	  handle_error()
Ans)
	1. Inconsistency of indentation
	2. exceptions need to be handled explicitly with the corresponding exception names,
	   and then, with Exception to print/log the error message

		try:
			some_code()
		except ZeroDivisionError:
			handle_zero_div_error()
		except Exception as ex:
			print(ex)
			handle_error()


16.	Optimize the following code for speed.
		import collections

		def flatten(data):
			if isinstance(data, collections.Iterable):
				out = []
				for i in data:
					out.extend(flatten(i))
				return out
			else:
				return [data,]

		l = [1, [2, 3], [[4, [5,6],7], 8]]
		print(flatten(l))
Ans)

		def flatten(data, result=None):
			if not result:
				result = []
			for ele in data:
				if isinstance(ele, collections.Iterable):
					result.extend(flatten(ele))
				else:
					result.append(ele)
			return result

		def flatten(data):
			result = []
			for ele in data:
				if isinstance(ele, list):
					result.extend(flatten(ele))
				else:
					result.append(ele)
			return result


17.	What does this code output?
		def f(x,l=[]):
			for i in range(x):
				l.append(i*i)
			print(l)

		f(2)
		f(3,[3,2,1])
		f(3)
Ans)

		f(2)               # [0, 1]
		f(3,[3,2,1])       # [3, 2, 1, 0, 1, 4]
		f(3)               # [0, 1, 0, 1, 4]   ===> leakge

	default arguments should not be mutable objects. It is anti-pattern

	Better Design
		def f(x,l=None):
			if not l:
				l = []
			for i in range(x):
				l.append(i*i)
			print(l)

		f(2)               # [0, 1]
		f(3,[3,2,1])       # [3, 2, 1, 0, 1, 4]
		f(3)               # [0, 1, 4]   ===> NO LEAKAGE

18.	Given a string of numbers, space separated, which can have repetition,
   print the numbers that are repeated
Ans)
	from collections import Counter

	def get_repeating_nums(nums_str):
		numbers = nums_str.split()

		counts = Counter(numbers)
		repeated_nums = []
		for num, count in counts.items():
			if count > 1:
				repeated_nums.append(num)
		return repeated_nums

	get_repeating_nums('1 2 4 2 5 7 40 4 5')  # ['2', '4', '5']


19.	Write a function that returns the number of occurrences of each item in the
    above string of numbers.
Ans)
	from collections import Counter

	def get_nums_frequency(nums_str):
		numbers = nums_str.split()

		counts = Counter(numbers)
		return counts

	get_nums_frequency('1 2 4 2 5 7 40 4 5')  # {'2': 2, '4': 2, '5': 2, '1': 1, '7': 1, '40': 1}


20.	Write class(es) that represent the following shapes: square, rectangle, circle.
    Each shape should have a perimeter and an area.
Ans)

	from abc import ABC, abstractmethod
	import math


	class Shape(ABC):
		def __init__(self, length, bredth=None):
			self.length = length
			self.bredth = bredth
			super().__init__()

		@abstractmethod
		def area(self):
			pass

		@abstractmethod
		def perimeter(self):
			pass


	class circle(Shape):
		def __init__(self, length):
			super().__init__(length)

		def area(self):
			return math.pi * (self.length ** 2)

		def perimeter(self):
			return 2 * math.pi * self.length


	class Square(Shape):
		def __init__(self, length):
			super().__init__(length)

		def area(self):
			return self.length ** 2

		def perimeter(self):
			return self.length * 2


	class Rectangle(Shape):
		def __init__(self, length, bredth):
			super().__init__(length, bredth=bredth)

		def area(self):
			return self.length * self.bredth

		def perimeter(self):
			return self.length * 2 * self.bredth


	if __name__ == '__main__':
		c = circle(10)
		print(f'{c.area()      =}') # 314.1592653589793
		print(f'{c.perimeter() =}') # 62.83185307179586

		s = Square(10)
		print(f'{s.area()      =}') # 100
		print(f'{s.perimeter() =}') # 20

		r = Rectangle(10, 20)
		print(f'{r.area()      =}') # 200
		print(f'{r.perimeter() =}') # 400
